const fs=require("fs"),path=require("path"),async=require("async"),log=require("npmlog"),nopt=require("nopt"),installLib=require("./../lib/install"),commonTools=require("./../lib/base/common-tools"),convertJsonToList=require("./../lib/util/json").convertJsonToList,processName=path.basename(process.argv[1],".js"),version=commonTools.version,cliControl=commonTools.cliControl,help=commonTools.help,setupDevice=commonTools.setupDevice,appdata=commonTools.appdata,errHndl=commonTools.errMsg;
process.on("uncaughtException",function(a){log.error("uncaughtException",a.toString());log.info("uncaughtException",a.stack);cliControl.end(-1)});2===process.argv.length&&process.argv.splice(2,0,"--help");
const knownOpts={device:[String,null],"device-list":Boolean,list:Boolean,listfull:Boolean,type:[String,null],remove:String,opkg:Boolean,"opkg-param":[String,null],version:Boolean,help:Boolean,"hidden-help":Boolean,level:"silly verbose info http warn error".split(" ")},shortHands={d:["--device"],r:["--remove"],o:["--opkg"],op:["--opkg-param"],l:["--list"],F:["--listfull"],t:["--type"],D:["--device-list"],V:["--version"],h:["--help"],hh:["--hidden-help"],v:["--level","verbose"]},argv=nopt(knownOpts,
shortHands,process.argv,2);log.heading=processName;log.level=argv.level||"warn";installLib.log.level=log.level;log.verbose("argv",argv);argv.level&&(delete argv.level,0===argv.argv.remain.length&&1===Object.keys(argv).length&&(argv.help=!0));const options={appId:"com.ares.defaultName",device:argv.device,opkg:argv.opkg||!1,opkg_param:argv["opkg-param"]};let op;
argv.help||argv["hidden-help"]?(showUsage(argv["hidden-help"]),cliControl.end()):argv.list?op=list:argv.listfull?op=listFull:argv.remove?op=remove:argv["device-list"]?setupDevice.showDeviceList(finish):argv.version?version.showVersionAndExit():op=install;op&&version.checkNodeVersion(function(){async.series([op.bind(this)],finish)});function showUsage(a){a?help.display(processName,appdata.getConfig(!0).profile,a):help.display(processName,appdata.getConfig(!0).profile)}
function install(){const a=argv.argv.remain[0];log.info("install():","pkgPath:",a);if(a){if(!fs.existsSync(path.normalize(a)))return finish(errHndl.getErrMsg("NOT_EXIST_PATH",a));installLib.install(options,a,finish)}else return finish(errHndl.getErrMsg("EMPTY_VALUE","PACKAGE_FILE"))}function list(){installLib.list(options,function(a,b){let c="";Array.isArray(b)&&b.forEach(function(d){argv.type&&argv.type!==d.type||(c+=d.id+"\n")});finish(a,{msg:c.trim()})})}
function listFull(){installLib.list(options,function(a,b){let c="";Array.isArray(b)&&b.forEach(function(d){c+="id : "+d.id+"\n";delete d.id;c+=convertJsonToList(d,0)+"\n"});finish(a,{msg:c.trim()})})}function remove(){const a="true"===argv.remove?argv.argv.remain[0]:argv.remove;log.info("remove():","pkgId:",a);if(!a)return finish(errHndl.getErrMsg("EMPTY_VALUE","APP_ID"));installLib.remove(options,a,finish)}
function finish(a,b){if(a){if(Array.isArray(a)&&0<a.length){for(const c in a)log.error(a[c].heading,a[c].message);log.verbose(a[0].stack)}else log.error(a.toString()),log.verbose(a.stack);cliControl.end(-1)}else log.info("finish():",b),b&&b.msg&&console.log(b.msg),cliControl.end()};
