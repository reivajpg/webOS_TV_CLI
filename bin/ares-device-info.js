const path=require("path"),async=require("async"),log=require("npmlog"),nopt=require("nopt"),deviceInfoLib=require("./../lib/deviceInfo"),commonTools=require("./../lib/base/common-tools"),version=commonTools.version,cliControl=commonTools.cliControl,help=commonTools.help,setupDevice=commonTools.setupDevice,appdata=commonTools.appdata,errHndl=commonTools.errMsg,processName=path.basename(process.argv[1],".js");
process.on("uncaughtException",function(a){log.error("uncaughtException",a.toString());log.verbose("uncaughtException",a.stack);cliControl.end(-1)});
const knownOpts={"resource-monitor":Boolean,list:Boolean,"id-filter":[String,null],"time-interval":[Number,null],save:Boolean,device:[String,null],"device-list":Boolean,version:Boolean,help:Boolean,level:"silly verbose info http warn error".split(" ")},shortHands={r:["--resource-monitor"],l:["--list"],id:["--id-filter"],t:["--time-interval"],s:["--save"],d:["--device"],D:["--device-list"],V:["--version"],h:["--help"],v:["--level","verbose"]},argv=nopt(knownOpts,shortHands,process.argv,2);
log.heading=processName;log.level=argv.level||"warn";deviceInfoLib.log.level=log.level;log.verbose("argv",argv);const options={device:argv.device,outputPath:argv.argv.remain[0]||null};let op;argv["device-list"]?setupDevice.showDeviceList(finish):argv.version?version.showVersionAndExit():argv.help?(showUsage(),cliControl.end()):op=argv["resource-monitor"]?getResourceMonitor:getDeviceInfo;1<argv.argv.remain.length&&finish(errHndl.getErrMsg("INVALID_ARGV"));
op&&version.checkNodeVersion(function(a){if(a)return finish(a);async.series([op.bind(this)],finish)});function showUsage(){help.display(processName,appdata.getConfig(!0).profile)}function getDeviceInfo(){deviceInfoLib.systemInfo(options,finish)}
function getResourceMonitor(){options.interval=argv["time-interval"]||null;options.save=argv.save||null;options.outputPath=argv.argv.remain[0]||null;if(-1!==argv.argv.cooked.indexOf("--time-interval")){if(0>=options.interval)return finish(errHndl.getErrMsg("INVALID_INTERVAL"));if(!argv["time-interval"]||-1===argv.argv.original.indexOf(options.interval.toString()))return finish(errHndl.getErrMsg("EMPTY_VALUE","time-interval"))}log.info("getResourceMonitor()","interval:",options.interval);if(argv["id-filter"]){const a=
/^-/;if("true"===argv["id-filter"]||argv["id-filter"].match(a))return finish(errHndl.getErrMsg("EMPTY_VALUE","id-filter"));options.id=argv["id-filter"];deviceInfoLib.processResource(options,finish)}else argv.list?deviceInfoLib.processResource(options,finish):deviceInfoLib.systemResource(options,finish)}
function finish(a,b){if(a){if(Array.isArray(a)&&0<a.length){for(const c in a)log.error(a[c].heading,a[c].message);log.verbose(a[0].stack)}else log.error(a.toString()),log.verbose(a.stack);cliControl.end(-1)}else b&&(b.msg?console.log(b.msg):console.log(b)),cliControl.end()};
