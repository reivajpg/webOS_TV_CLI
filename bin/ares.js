const nopt=require("nopt"),async=require("async"),path=require("path"),fs=require("fs"),log=require("npmlog"),Table=require("easy-table"),commonTools=require("./../lib/base/common-tools"),hasProperty=require("./../lib/util/property"),cliControl=commonTools.cliControl,version=commonTools.version,help=commonTools.help,appdata=commonTools.appdata,errHndl=commonTools.errMsg,processName=path.basename(process.argv[1]).replace(/.js/,"");
process.on("uncaughtException",function(a){log.error("uncaughtException",a.toString());log.verbose("uncaughtException",a.stack);cliControl.end(-1)});2===process.argv.length&&process.argv.splice(2,0,"--help");const knownOpts={help:Boolean,list:Boolean,version:Boolean,level:"silly verbose info http warn error".split(" ")},shortHands={h:["--help"],l:["--list"],V:["--version"],v:["--level","verbose"]},argv=nopt(knownOpts,shortHands,process.argv,2);log.heading=processName;log.level=argv.level||"warn";
log.verbose("argv",argv);argv.level&&(delete argv.level,0===argv.argv.remain.length&&1===Object.keys(argv).length&&(argv.help=!0));let op;argv.list?op=commandList:argv.version?version.showVersionAndExit():argv.help?(showUsage(),cliControl.end()):op=display;op&&version.checkNodeVersion(function(){async.series([op.bind(this)],finish)});
function commandList(a){let b;const c=new Table,e=appdata.getConfig(!0).profile;try{b=JSON.parse(fs.readFileSync(path.join(__dirname,"../","files","conf","ares.json"))),Object.keys(b).forEach(function(d){b[d].profile&&-1===b[d].profile.indexOf(e)||!fs.existsSync(path.join(__dirname,d+".js"))||(c.cell("CMD",d),c.cell("Description",b[d].description),c.newRow())}),console.log(c.print()),a()}catch(d){a(errHndl.getErrMsg("INVALID_JSON_FORMAT"))}}
function display(a){let b;try{b=JSON.parse(fs.readFileSync(path.join(__dirname,"../","files","conf","ares.json")));for(const c in argv)hasProperty(b,"ares-"+c)&&fs.existsSync(path.join(__dirname,"ares-"+c+".js"))&&help.display("ares-"+c,appdata.getConfig(!0).profile);a()}catch(c){a(errHndl.getErrMsg("INVALID_JSON_FORMAT"))}}function showUsage(){help.display(processName,appdata.getConfig(!0).profile)}
function finish(a,b){if(a){if(Array.isArray(a)&&0<a.length){for(const c in a)log.error(a[c].heading,a[c].message);log.verbose(a[0].stack)}else log.error(a.toString()),log.verbose(a.stack);cliControl.end(-1)}else b&&b.msg&&console.log(b.msg),cliControl.end()};
