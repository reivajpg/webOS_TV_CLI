const path=require("path"),log=require("npmlog"),nopt=require("nopt"),async=require("async"),novacom=require("./../lib/base/novacom"),commonTools=require("./../lib/base/common-tools"),version=commonTools.version,cliControl=commonTools.cliControl,help=commonTools.help,setupDevice=commonTools.setupDevice,appdata=commonTools.appdata,errHndl=commonTools.errMsg,processName=path.basename(process.argv[1],".js");
process.on("uncaughtException",function(a){log.error("uncaughtException",a.toString());log.verbose("uncaughtException",a.stack);cliControl.end(-1)});
const knownOpts={help:Boolean,"hidden-help":Boolean,level:"silly verbose info http warn error".split(" "),version:Boolean,"device-list":Boolean,forward:Boolean,port:[String,Array],getkey:Boolean,passphrase:[String,null],device:[String,null],run:[String,null],put:[String,null],get:[String,null]},shortHands={h:["--help"],hh:["--hidden-help"],v:["--level","verbose"],V:["--version"],D:["--device-list"],f:["--forward"],p:["--port"],k:["--getkey"],pass:["--passphrase"],d:["--device"],r:["--run"]},argv=
nopt(knownOpts,shortHands,process.argv,2);log.heading=processName;log.level=argv.level||"warn";log.verbose("argv",argv);const options={name:argv.device};let op;argv["device-list"]?setupDevice.showDeviceList(finish):argv.getkey?op=getkey:argv.run?op=run:argv.forward?op=forward:argv.version?version.showVersionAndExit():(argv["hidden-help"]?help.display(processName,appdata.getConfig(!0).profile,!0):help.display(processName,appdata.getConfig(!0).profile,!1),cliControl.end());
op&&version.checkNodeVersion(function(){async.series([op.bind(this)],finish)});
function getkey(a){const c=new novacom.Resolver;async.waterfall([c.load.bind(c),c.getSshPrvKey.bind(c,options),function(b,f){if(b){if(argv.passphrase)return f(null,b,argv.passphrase);process.stdin.resume();process.stdin.setEncoding("utf8");process.stdout.write("input passphrase [default: webos]:");process.stdin.on("data",function(d){d=d.toString().trim();""===d&&(d="webos");log.info("registered passphrase is ",d);f(null,b,d)})}else return f(Error("Error getting key file from the device"))},function(b,
f,d){const e={};e.name=options.name;e.privateKey={openSsh:b};e.passphrase=f;e.files="sftp";e.port="9922";e.username="prisoner";e.password="@DELETE@";d(null,e)},c.modifyDeviceFile.bind(c,"modify")],function(b){if(b)return a(b);a(null,{msg:"Success"})})}function run(a){"true"===argv.run?finish(errHndl.getErrMsg("EMPTY_VALUE","DEVICE_COMMAND")):options.session=new novacom.Session(options,function(c){c?a(c):options.session.run(argv.run,process.stdin,process.stdout,process.stderr,a)})}
function forward(a){if(argv.port&&"true"!==argv.port.toString()){const c=[function(b){options.session=new novacom.Session(options,b)}];try{argv.port.forEach(function(b){b=b.split(":");const f=parseInt(b[0],10),d=parseInt(b[1],10)||f;c.push(function(e){options.session.forward(f,d,e)});c.push(function(){console.log("forward","running...")})})}catch(b){a(b);return}async.series(c,a)}else finish(errHndl.getErrMsg("EMPTY_VALUE","DEVICE_PORT:HOST_PORT"))}
function finish(a,c){if(a){if(Array.isArray(a)&&0<a.length){for(const b in a)log.error(a[b].heading,a[b].message);log.verbose(a[0].stack)}else log.error(a.toString()),log.verbose(a.stack);cliControl.end(-1)}else log.info("finish():",c),c&&c.msg&&console.log(c.msg),cliControl.end()};
