const path=require("path"),async=require("async"),log=require("npmlog"),nopt=require("nopt"),inspectLib=require("./../lib/inspect"),commonTools=require("./../lib/base/common-tools"),cliControl=commonTools.cliControl,version=commonTools.version,help=commonTools.help,setupDevice=commonTools.setupDevice,appdata=commonTools.appdata,errHndl=commonTools.errMsg,processName=path.basename(process.argv[1],".js");
process.on("uncaughtException",function(a){log.error("uncaughtException",a.toString());log.verbose("uncaughtException",a.stack);cliControl.end(-1)});
const knownOpts={device:[String,null],app:[String,null],service:[String,Array],"device-list":Boolean,open:Boolean,"host-port":[String,null],version:Boolean,help:Boolean,"hidden-help":Boolean,level:"silly verbose info http warn error".split(" ")},shortHands={d:["--device"],a:["--app"],s:["--service"],o:["--open"],P:["--host-port"],D:["--device-list"],V:["--version"],h:["--help"],hh:["--hidden-help"],v:["--level","verbose"]},argv=nopt(knownOpts,shortHands,process.argv,2);log.heading=processName;
log.level=argv.level||"warn";log.verbose("argv",argv);argv.level&&(delete argv.level,0===argv.argv.remain.length&&1===Object.keys(argv).length&&(argv.help=!0));const options={device:argv.device,appId:argv.app||argv.argv.remain[0],serviceId:argv.service,open:argv.open,hostPort:argv["host-port"]};let op;argv.help||argv["hidden-help"]?(showUsage(argv["hidden-help"]),cliControl.end()):argv.version?version.showVersionAndExit():argv["device-list"]?setupDevice.showDeviceList(finish):op=inspect;
op&&version.checkNodeVersion(function(){async.series([op.bind(this)],finish)});function showUsage(a){a?help.display(processName,appdata.getConfig(!0).profile,a):help.display(processName,appdata.getConfig(!0).profile)}
function inspect(){log.info("inspect():","AppId:",options.appId,"ServiceId:",options.serviceId);if(options.appId||options.serviceId){if(options.appId&&"true"===options.appId[0]||"true"===options.appId)return finish(errHndl.getErrMsg("EMPTY_VALUE","APP_ID"));if(options.serviceId&&"true"===options.serviceId[0])return finish(errHndl.getErrMsg("EMPTY_VALUE","SERVICE_ID"));async.series([inspectLib.inspect.bind(inspectLib,options,null),function(){}],function(a){finish(a)})}else showUsage(),cliControl.end(-1)}
function finish(a,b){if(a){if(Array.isArray(a)&&0<a.length){for(const c in a)log.error(a[c].heading,a[c].message);log.verbose(a[0].stack)}else log.error(a.toString()),log.verbose(a.stack);cliControl.end(-1)}else b&&b.msg&&console.log(b.msg),cliControl.end()};
